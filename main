#!/usr/bin/env python3
import os
import json
import pprint
from lib.game import Game
from lib.log import Logger
from lib.organiser import Organiser

organiser = Organiser()
logger = Logger()

status = input('Press enter to continue or press R to reset\n').lower()
logger.reset() if status == 'r' else None

pre_set_move_chance = {'left': 25.00, 'right': 25.00, 'down': 25.00, 'up': 25.00}
logs = logger.load_logs()
start = len(logs)
end = 10

for generation in range(start, start + end):
    move_chance = organiser.set_movement_chance(logs, 12) if len(logs) > 0 else pre_set_move_chance

    for game_number in range(15):
        o = Organiser()
        g = Game()
        g.play_game(game_number, move_chance, lambda last_move: o.movement_counter(last_move))
        info = o.percentage_counter()
        info['score'] = g.score
        logger.add(info)
        logs.append(info)

    p1 = 'generation: ' + str(generation)
    best_game = organiser.sort_scores(logs)[0]
    p2 = 'left: ' + str(round(best_game['left'])) + ' right: ' + str(round(best_game['right'])) + ' up: ' + str(round(best_game['up'])) + ' down: ' + str(round(best_game['down']))
    p3 = 'highscore: ' + str(round(best_game['score']))
    print(' - '.join([p1, p2, p3]))
    logger.save_and_reset('gen-' + str(generation))
