#!/usr/bin/env python3
"""######################################
##########                    ###########
########## Twenty-forty-eight ###########
##########                    ###########
######################################"""

import sys
import time
import argparse
from lib.game import Game
import lib.algorithm as algo


#####################
#### Manual game ####
#####################

def manual_game():
    """ Play the 2048 manually """
    # Set keybinds
    keys = {
        "left": "a",
        "right": "d",
        "down": "s",
        "up": "w",
        "quit": "q"
    }
    reversed_keys = {v: k for k, v in keys.items()}


    # While playing games
    while True:

        # Load an empty game and render it
        game = Game(BOARD_SIZE)


        game = play_manual_game(game, keys, reversed_keys)

        # Game is over, rematch???
        print("\n\n\nGame over!\nFinal score: {}".format(game.score))
        rematch = "."
        while rematch not in ("", "q"):
            rematch = input("Continue (enter) or quit ('q' and enter / ctrl-c)?\n")
            rematch = rematch.lower()

        if rematch == "q":
            print("Thanks for playing!")
            break

    if RENDER_TYPE == "gui":
        RENDER.root.mainloop()

def play_manual_game(game, keys, reversed_keys):
    " Play a single manual game"

    # Render before the game starts
    if RENDER_TYPE == "gui":
        RENDER.draw_gui_board(game.board.board)
    elif RENDER_TYPE == "terminal":
        rendering.render_manual_in_terminal(keys, None, game)
    else:
        print("Rendering is turned off, good luck :')\nPress 'q' to quit the game")

    # play the game
    won = False
    while True:
        possible_directions = game.possible_directions(game.board.board)
        # Game over if no possible directions
        if len(possible_directions) == 0:
            break

        # Keyboard input (press and release is not working, so we use time.sleep)
        key = read_single_keypress().lower()
        direction = reversed_keys[key] if key in reversed_keys else None

        # quit the game
        if direction == "quit":
            print("Thanks for playing!")
            sys.exit()
        # Perform a movement
        elif direction in possible_directions:
            game.perform_movement(direction)
            # hint = algo.determine_best_movement(game.board.board, possible_directions)
            if RENDER_TYPE == "gui":
                RENDER.draw_gui_board(game.board.board)
            elif RENDER_TYPE == "terminal":
                rendering.render_manual_in_terminal(keys, direction, game)

        # Check if the game has been won
        if not won:
            for row in game.board.board:
                if 128 in row:
                    print("\nYou have won the game!!! \n")
                    won = True
    return game


def read_single_keypress():
    """Waits for a single keypress on stdin.
    #
    This is a silly function to call if you need to do it a lot because it has
    to store stdin's current setup, setup stdin for reading single keystrokes
    then read the single keystroke then revert stdin back after reading the
    keystroke.
    #
    Returns the character of the key that was pressed (zero on
    KeyboardInterrupt which can happen when a signal gets handled)
    #
    Function obtained from:
    https://stackoverflow.com/questions/983354/how-do-i-make-python-wait-for-a-pressed-key
    """
    #
    f_d = sys.stdin.fileno()
    # save old state
    flags_save = fcntl.fcntl(f_d, fcntl.F_GETFL)
    attrs_save = termios.tcgetattr(f_d)
    # make raw - the way to do this comes from the termios(3) man page.
    attrs = list(attrs_save) # copy the stored version to update
    # iflag
    attrs[0] &= ~(termios.IGNBRK | termios.BRKINT | termios.PARMRK
                  | termios.ISTRIP | termios.INLCR | termios. IGNCR
                  | termios.ICRNL | termios.IXON)
    # oflag
    attrs[1] &= ~termios.OPOST
    # cflag
    attrs[2] &= ~(termios.CSIZE | termios. PARENB)
    attrs[2] |= termios.CS8
    # lflag
    attrs[3] &= ~(termios.ECHONL | termios.ECHO | termios.ICANON
                  | termios.ISIG | termios.IEXTEN)
    termios.tcsetattr(f_d, termios.TCSANOW, attrs)
    # turn off non-blocking
    fcntl.fcntl(f_d, fcntl.F_SETFL, flags_save & ~os.O_NONBLOCK)
    # read a single keystroke
    try:
        ret = sys.stdin.read(1) # returns a single character
    except KeyboardInterrupt:
        ret = 0
    finally:
        # restore old state
        termios.tcsetattr(f_d, termios.TCSAFLUSH, attrs_save)
        fcntl.fcntl(f_d, fcntl.F_SETFL, flags_save)
    return ret


########################
#### Automatic game ####
########################

def automatic_game():
    """ Play the 2048 automatically using the ai script """
    # Set time.sleep between frames
    sleeping_time = 0.0

    # play x games
    game_scores = {}
    games_won = 0

    for game_index in range(1, TOTAL_GAMES+1):
        game = Game(BOARD_SIZE)

        # Render board if render_game is True
        if RENDER_TYPE == "terminal":
            rendering.render_automatic_in_terminal(None, game, game_index)
                # game.board.board, game.score, None, game.moves, game_index
            # )
            time.sleep(sleeping_time)
        elif RENDER_TYPE == "gui":
            RENDER.draw_gui_board(game.board.board)

        #Play a single game
        while True:

            # Duplicate the board to determine the possible directions
            possible_directions = game.possible_directions(game.board.board)

            if len(possible_directions) == 0:
                break

            # Let the algorithm choose the best direction to perform
            direction = algo.determine_best_movement(game.board.board, possible_directions)

            # Perform a movement
            game.perform_movement(direction)

            if RENDER_TYPE == "gui":
                RENDER.draw_gui_board(game.board.board)
            # Render board if render_game is True
            elif RENDER_TYPE == "terminal":
                rendering.render_automatic_in_terminal(direction, game, game_index)
                algo.determine_best_movement(game.board.board, possible_directions, True)
                time.sleep(sleeping_time)

        # Determine if the game has been won
        for row in game.board.board:
            if 2048 in row:
                games_won += 1
                break

        # Save the score of the game
        game_scores[game_index] = game.score
        print(f"Games played: {game_index}/{TOTAL_GAMES}", end="\r")

    if RENDER_TYPE == "gui":
        RENDER.root.mainloop()

    # Print game output information
    print("\rGames played: {}".format(TOTAL_GAMES))
    print("Average score: {}".format(sum(game_scores.values())/TOTAL_GAMES))
    print("Highest score: {}".format(game_scores[max(game_scores, key=game_scores.get)]))
    print("The algo has beaten {} games".format(games_won))

###############
#### Input ####
###############

def argument_handler():
    """ handles input arguments """

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "game_mode",
        type=str,
        choices=["manual", "automatic"],
        help="Play the game in manual mode or automatic mode"
    )

    parser.add_argument(
        "--render",
        type=str,
        choices=["none", "terminal", "gui"],
        default="terminal",
        help="The type of game rendering (default: terminal)"
    )

    parser.add_argument(
        "--total_games",
        type=int,
        default=1,
        help="""int - The total games that will be played when running the automatic game
            (default: 1)"""
    )
    parser.add_argument(
        "--board_size",
        type=int,
        default=4,
        help="int = The grid size of the board (default: 4)"
    )
    return parser.parse_args()

# Load arguments
ARGS = argument_handler()
TOTAL_GAMES = abs(ARGS.total_games)
BOARD_SIZE = abs(ARGS.board_size)
RENDER_TYPE = ARGS.render.lower()

if RENDER_TYPE == "gui":
    if ARGS.game_mode == "manual":
        print("""
            GUI rendering is not working properly yet...\n
            Switching back to terminal rendering...
        """)
        RENDER_TYPE = "terminal"
        import lib.terminal_rendering as rendering

    else:
        from lib.gui_rendering import Render
        RENDER = Render(BOARD_SIZE)

elif RENDER_TYPE == "terminal":
    import lib.terminal_rendering as rendering

if ARGS.game_mode == "manual":
    import os
    import termios
    import fcntl


    # Run manual game
    manual_game()

elif ARGS.game_mode == "automatic":
    automatic_game()
